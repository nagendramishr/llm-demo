@page "/list"
@using SamsLife.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http
@using System.Text.Json
@inject ProtectedLocalStorage BrowserStorage
@* @inject IConfiguration Configuration *@
@attribute [Authorize]

<PageTitle>List</PageTitle>
<AuthorizeView>
    <Authorized>

    @{
        var user = context?.User?.Identity?.Name ?? "";
        @* var user = "nmishr@outlook.com"; *@
    }

    <h1>All The Facts:</h1>

    <div class="button" @onclick="@( async() => await LoadBoards(user))">Refresh</div>
    <div class="boards">
    <span>Please select a board to view the facts:</span>
        <select @bind="selectedBoard" @bind:event="onchange">
            <option value="">Select a board</option>
            @foreach (var board in boards)
            {
                <option value="@board.id">@board.Title</option>
            }
        </select>
    </div>


    @if (isReady) {
        <hr>
        <div class="list">
            @foreach (string fact in facts)
            {
                <div class="fact">
                        @fact
                </div>
            }
        </div>
    }
    else if (isLoading) {
        <p>Loading...</p>
    }

    @if (errorOccurred) {
        <p>@statusMessage</p>

    }

        </Authorized>
        <NotAuthorized>
            <h3>Not Authorized</h3>
            <p>You are not authorized to view this page.</p>
        </NotAuthorized>
    </AuthorizeView>
<style>
.list {
    margin-top: 40px;
    display: flex;
    flex-direction:column;
    justify-content: flex-start;
    align-items: flex-start;
    height: 80%; /* Set a fixed height for the list */
    overflow-y: auto; /* Add vertical scrollbar */
    width: 60%;
}
.fact {
    background-color: #f8f9fa;
    color: #212529;
    padding: 8px 16px;
    border-radius: 0px;
    border: 1px solid #ced4da;
    display: inline-block;
    cursor: pointer;
    text-align: left;
    user-select: none;
    height: auto;;
    margin-bottom: 0px;
    width: 100%;
    word-wrap: break-word;
}
.button {
    background-color: #007bff;
    color: #ffffff;
    padding: 8px 16px;
    border-radius: 4px;
    display: inline-block;
    cursor: pointer;
    text-align: center;
    user-select: none;
    height: 40px;
}

.button-like:hover {
    background-color: #0056b3;
}
</style>

@code {

    List<Board> boards = new List<Board>();
    List<string> facts = new List<string>();
    bool isReady = false;
    bool isLoading = false;
    bool errorOccurred = false;
    string statusMessage = "";

    private string _selectedBoard = string.Empty;
    private string selectedBoard
    {
        get => _selectedBoard;
        set
        {
            if (_selectedBoard != value)
            {
                _selectedBoard = value;
                OnSelectedBoardChanged().ConfigureAwait(false);
            }
        }
    }    

    // Clean this up LATER!!!! .. basically, I think there is a round trip here that is not needed.
    protected async Task OnAfterRenderAsync() // = On Page Load
    {   
        if (isReady == false && isLoading == false)
        {
            @* await LoadBoards(); *@
        }
        StateHasChanged();
    }


    private async Task LoadBoards(string user) { 
        var util = new Util();

        var data = await util.GetBoards(user);
        if (util.errorOccurred)
        {
            errorOccurred = true;
            statusMessage = util.statusMessage;
            isLoading = false;
            StateHasChanged();
            return;
        }
        boards = data;
        StateHasChanged();
    }

    private async Task OnSelectedBoardChanged()
    {
        Console.WriteLine($"Selected board: {selectedBoard}");
        if (!string.IsNullOrEmpty(selectedBoard))
        {
            await GetFacts();
        }
    }
    private async Task GetFacts( )
    {
        isReady = false; 
        isLoading = true;
        StateHasChanged();
        var util = new Util();

        var data = await util.GetFacts();
        if (util.errorOccurred)
        {
            errorOccurred = true;
            statusMessage = util.statusMessage;
            isLoading = false;
            StateHasChanged();
            return;
        }
        facts = data;

        isLoading = false;
        isReady = true;
        StateHasChanged();
    }


}
