@page "/list"
@using SamsLife.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http
@using System.Text.Json
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject UrlHashHelper UrlHashHelper
@inject ProtectedLocalStorage BrowserStorage
@inject IConfiguration Configuration
@inject Util util
@attribute [Authorize]

<PageTitle>List</PageTitle>
<AuthorizeView>
    <NotAuthorized>
        <h3>Not Authorized</h3>
        <p>You are not authorized to view this page.</p>
    </NotAuthorized>
    <Authorized>

    @{
        users = Configuration.GetSection("AllowedUsers")?.Value.Split(",").ToList() ?? new List<string>();
        hasAccess = false;

        var user = context?.User?.Identity?.Name ?? "";
        if (!string.IsNullOrEmpty(user))
        {
            foreach (var usr in users)
            {
                if (usr.ToString().Trim() == user.Trim())
                {
                    hasAccess = true;
                    break;
                }
            }

        } else {
            <p>Sorry, you do not have access to this page.</p>
        }
    }

    <h1>All The Facts:</h1>

    <div class="button" @onclick="@( async() => await LoadBoards(user))">Refresh</div>
    <div class="boards">
    <span>Please select a board to view the facts:</span>
        <select @bind="selectedBoard" @bind:event="onchange">
            <option value="">Select a board</option>
            @foreach (var board in boards)
            {
                <option value="@board.id">@board.Title</option>
            }
        </select>
    </div>

    @if (errorOccurred) {
        <p>@errorMessage</p>

    }

    @if (isReady) {
        <hr>
        <div class="list">
            @foreach (string fact in facts)
            {
                <div class="fact">
                        @fact
                </div>
            }
        </div>
    }
    else if (isLoading) {
        <p>Loading...  @selectedBoard</p>
    }

    @if (errorOccurred) {
        <p>@statusMessage</p>

    }

    </Authorized>
</AuthorizeView>
<style>
.list {
    margin-top: 40px;
    display: flex;
    flex-direction:column;
    justify-content: flex-start;
    align-items: flex-start;
    height: 80%; /* Set a fixed height for the list */
    overflow-y: auto; /* Add vertical scrollbar */
    width: 60%;
}
.fact {
    background-color: #f8f9fa;
    color: #212529;
    padding: 8px 16px;
    border-radius: 0px;
    border: 1px solid #ced4da;
    display: inline-block;
    cursor: pointer;
    text-align: left;
    user-select: none;
    height: auto;;
    margin-bottom: 0px;
    width: 100%;
    word-wrap: break-word;
}
.button {
    background-color: #007bff;
    color: #ffffff;
    padding: 8px 16px;
    border-radius: 4px;
    display: inline-block;
    cursor: pointer;
    text-align: center;
    user-select: none;
    height: 40px;
}

.button-like:hover {
    background-color: #0056b3;
}
</style>

@code {
    bool hasAccess = false;

    List<Board> boards = new List<Board>();
    List<string> users = new List<string>();
    List<string> facts = new List<string>();
    bool isReady = false;
    bool isLoading = false;
    bool errorOccurred = false;
    string errorMessage = "";
    string statusMessage = "";

    private string _selectedBoard = string.Empty;
    private string selectedBoard
    {
        get => _selectedBoard;
        set
        {
            if (_selectedBoard != value)
            {
                _selectedBoard = value;
                OnSelectedBoardChanged();
            }
        }
    }    

    // Clean this up LATER!!!! .. basically, I think there is a round trip here that is not needed.
    protected async Task OnAfterRenderAsync() // = On Page Load
    {   
        if (isReady == false && isLoading == false)
        {
            @* await LoadBoards(); *@
        }
        StateHasChanged();
    }

    private async Task LoadBoards(string user) { 
        var data = await util.GetBoards(user);
        if (util.errorOccurred)
        {
            errorOccurred = true;
            statusMessage = util.statusMessage;
            isLoading = false;
            StateHasChanged();
            return;
        }
        boards = data;
        StateHasChanged();
    }

    private async Task OnSelectedBoardChanged()
    {
        Console.WriteLine($"Selected board: {selectedBoard}");
        if (!string.IsNullOrEmpty(selectedBoard))
        {
            await GetFacts();
            StateHasChanged();
        }
    }

    private async Task GetFacts()
    {
        isLoading = true;
        isReady = false;
        errorOccurred = false;
        StateHasChanged();

        var newFacts = await util.GetFacts(selectedBoard);

        errorOccurred = util.errorOccurred;
        statusMessage = util.statusMessage;

        if (!errorOccurred) facts = newFacts;

        isLoading = false;
        isReady = !errorOccurred;
        StateHasChanged();
    }

    private string boardId;
    private string hash;
    private bool isValidUrl = false;

    protected override void OnInitialized()
    {
        try {

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("bid", out var bidParam) && query.TryGetValue("hash", out var hashParam))
        {
            boardId = bidParam!;
            hash = hashParam!;

            @* // Validate the hash *@
            isValidUrl = UrlHashHelper.VerifyHash(boardId, hash);
        }
        else
        {
            @* // Handle missing parameters *@
            isValidUrl= false;
        }
        } catch (Exception ex) {
            errorOccurred = true;
            errorMessage = ex.Message;
            Console.WriteLine(ex);
        }
    }
}
