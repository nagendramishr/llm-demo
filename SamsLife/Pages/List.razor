@page "/list"
@using SamsLife.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http
@using System.Text.Json
@inject ProtectedLocalStorage BrowserStorage
@inject IConfiguration Configuration
@attribute [Authorize]

<PageTitle>List</PageTitle>
<AuthorizeView>
    <Authorized>
        
    <h1>All The Facts:</h1>

    <div class="boards">
    <span>Please select a board to view the facts:</span>
        <select @bind="selectedBoard">
            <option value="">Select a board</option>
            @foreach (var board in boards)
            {
                <option value="@board.id">@board.Title</option>
            }
        </select>

    </div>

    //<div class="button" @onclick="@( async() => await GetFacts())">Refresh</div>

    @if (isReady) {
        <hr>
        <div class="list">
            @foreach (string fact in facts)
            {
                <div class="fact">
                        @fact
                </div>
            }
        </div>
    }
    else if (isLoading) {
        <p>Loading...</p>
    }

    @if (errorOccurred) {
        <p>@statusMessage</p>

    }

        </Authorized>
        <NotAuthorized>
            <h3>Not Authorized</h3>
            <p>You are not authorized to view this page.</p>
        </NotAuthorized>
    </AuthorizeView>
<style>
.list {
    margin-top: 40px;
    display: flex;
    flex-direction:column;
    justify-content: flex-start;
    align-items: flex-start;
    height: 80%; /* Set a fixed height for the list */
    overflow-y: auto; /* Add vertical scrollbar */
    width: 60%;
}
.fact {
    background-color: #f8f9fa;
    color: #212529;
    padding: 8px 16px;
    border-radius: 0px;
    border: 1px solid #ced4da;
    display: inline-block;
    cursor: pointer;
    text-align: left;
    user-select: none;
    height: auto;;
    margin-bottom: 0px;
    width: 100%;
    word-wrap: break-word;
}
.button {
    background-color: #007bff;
    color: #ffffff;
    padding: 8px 16px;
    border-radius: 4px;
    display: inline-block;
    cursor: pointer;
    text-align: center;
    user-select: none;
    height: 40px;
}

.button-like:hover {
    background-color: #0056b3;
}
</style>

@code {

    List<string> facts = new List<string>();
    bool isReady = false;
    bool isLoading = false;
    bool errorOccurred = false;
    string statusMessage = "";

    string selectedBoard = string.Empty;
    

    // Clean this up LATER!!!! .. basically, I think there is a round trip here that is not needed.
    protected async Task OnAfterRenderAsync() // = On Page Load
    {   
        if (isReady == false && isLoading == false)
        {
            await GetBoards();
        }
        StateHasChanged();
    }

    private static HttpClient? sharedClient;
    
    // HttpClient lifecycle management best practices:
    // https://learn.microsoft.com/dotnet/fundamentals/networking/http/httpclient-guidelines#recommended-use

    private void getClient() {
        if (sharedClient == null)
        {
            var SamFuncHost = Configuration["SamFunction:Hostname"];
            var SamAuth = Configuration["SamFunction:FunctionKey"];

            sharedClient = new HttpClient();
            sharedClient.BaseAddress = new Uri($"https://{SamFuncHost}");
            sharedClient.DefaultRequestHeaders.Add("x-functions-key", SamAuth);
        }
    }
    private async Task GetFacts( )
    {
        await OnAfterRenderAsync();
        if (sharedClient == null)
        {
            getClient();

            isReady = false; 
            isLoading = true;
            StateHasChanged();
        }

        try {

            var httpResponse = await sharedClient!.GetAsync("api/getFacts");

            httpResponse.EnsureSuccessStatusCode();
            var response = await httpResponse.Content.ReadAsStringAsync();
            // Parse the response to get the response text
            var responses = System.Text.Json.JsonSerializer.Deserialize<List<string>>(response);
            if (responses != null)
            {
                facts = responses;
            }
            else
            {
                errorOccurred = true;
                statusMessage = "No facts found.";
            }

        } catch (HttpRequestException e) {
            errorOccurred = true;
            statusMessage = e.Message;
            Console.WriteLine(e);
        }

        isLoading = false;
        isReady = true;
        StateHasChanged();
    }

    static List<Board> boards = new List<Board>();
    private async Task GetBoards()
    {
        try
        {
            if (sharedClient == null)
            {
                getClient();
            }

            var httpResponse =
                await sharedClient!.GetAsync("api/getBoards");

            if (!httpResponse.IsSuccessStatusCode)
            {
                statusMessage = $"Error: {httpResponse.StatusCode}";
                return;
            }

            var jsonString = await httpResponse.Content.ReadAsStringAsync();
            boards = JsonSerializer.Deserialize<List<Board>>(jsonString);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"An error occurred: {ex.Message}";
        }
    }

}
