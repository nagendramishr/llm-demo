@page "/analyze"
@using SamsLife.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http
@using System.Text.Json
@inject ProtectedLocalStorage BrowserStorage
@inject IConfiguration Configuration
@attribute [Authorize]

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        @{
            users = Configuration.GetSection("AllowedUsers")?.Value.Split(",").ToList() ?? new List<string>();
            hasAccess = false;

            var user = context?.User?.Identity?.Name ?? "";
            if (!string.IsNullOrEmpty(user))
            {
                foreach (var usr in users)
                {
                    if (usr.ToString().Trim() == user.Trim())
                    {
                        hasAccess = true;
                        break;
                    }
                }

            } else {
                <p>Sorry, you do not have access to this page.</p>
            }

            if (hasAccess)
            {
                <h1>Analyze the Facts!</h1>

                <p>Let's anayze the facts's we know solid far.  Although we could let you try your own hand about this summary, we have a few 
                    pre-defined ways to summarize them.  Select one of the following:</p>

                <h3>Query:</h3>
                <div class="queryparent">
                    <div class="querylist" >
                        @foreach (KeyValuePair<string, string> query in queries)
                        {
                            <div class="query" @onclick="@( async() => await runQuery(query.Value))"  >
                                @query.Key
                                <span class="queryHText">query.Value</span>
                            </div>
                        }
                    </div>
                    <div class="queryBox">
                        @queryText
                    </div>
                    <div class="UsageBox">
                        <div class="Usage">
                            <b>LLM Usage Details:</b>
                        </div>
                        <div class="Usage">
                            @if (usage.Count > 0)
                            {
                                @foreach (KeyValuePair<string, string> kvp in usage)
                                {
                                    <div class="UsageItem">
                                        @if (kvp.Value.Contains("{")) {
                                            <div class="IndentedItems">
                                            @{
                                                var jo = JsonSerializer.Deserialize<Dictionary<string, object>>(kvp.Value);
                                                if (jo != null)
                                                {
                                                    <div class="IndentedHeading">@kvp.Key:</div>
                                                    foreach (var item in jo)
                                                    {
                                                        <div class="IndentedItem">
                                                            <span class="UsageItemKey">@item.Key:</span><span class="UsageItemValue"> @item.Value</span>
                                                        </div>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="UsageItemKey">@kvp.Key:</span><span class="UsageItemValue"> @kvp.Value</span>
                                                }
                                            }
                                            </div>
                                        }
                                        else {
                                            <span class="UsageItemKey">@kvp.Key:</span><span class="UsageItemValue"> @kvp.Value</span>
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <p>No usage data available.</p>
                            }
                        </div>
                    </div>
                </div>

                <div>
                    <h3>Response:</h3>  
                </div>
                <div>
                    @if (isLoading) {
                        <img src="circle.gif" alt="Loading..." />
                    }
                    else {
                        <hr>
                        <div> Font-Size: 
                            <span class="button" @onclick="@( async() => {fontSize="12px";} )">Small</span> 
                            <span class="button" @onclick="@( async() => {fontSize="24px";} )">Medium</span>
                            <span class="button" @onclick="@( async() => {fontSize="32px";} )">Large</span>
                        </div>
                        <hr>
                        <div class="response" style="font-size: @fontSize;">
                            @((MarkupString) response)
                        </div>
                    }
                </div>

                @if (errorOccurred) {
                    <p>@errorMessage</p>
                }
            }
}
    </Authorized>
    <NotAuthorized>
        <p>You are not authenticated.</p>
        <p><a href="/MicrosoftIdentity/Account/SignIn?returnUrl=%2Fanalyze">Login</a></p>
    </NotAuthorized>
</AuthorizeView>


<style>
    .button {
        background-color: #007bff;
        color: #ffffff;
        padding: 8px 16px;
        border-radius: 4px;
        display: inline-block;
        cursor: pointer;
        text-align: center;
        user-select: none;
        height: 40px;
    }
    .response {
        background-color: #f0f0f0;
        padding: 10px;
        border: thin black solid;
        width: "80%";
        height: auto; /* Make the response take the height of its content */
        flex-grow: 1;
        align-self: flex-start; /* Align the response at the top */
        font-size: 32px;
    }

    .queryparent {
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: flex-start;
        margin: 10px;
        width: 80%;
    }

    .querylist {
        display: flex;
        flex-direction: column;
        margin: 10px;
    }

    .query {
        background-color: #f0f0f0;
        padding: 10px;
        cursor: pointer;
        border: thin black solid;
        width: 100%;
    }

    .queryHText {
        visibility: hidden;
        width: 160px;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 4px;
        padding: 6px;
        
        /* Position the tooltip above the button */
        position: absolute;
        bottom: 125%;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        
        /* Add a fade-in effect */
        transition: opacity 0.3s;
    }

    .query:hover .queryHText {
        visibility: visible;
        opacity: 1;
    }

    .queryText {
        background-color: #f0f0f0;
        border: thin black solid;
    }

    .queryBox {
        padding: 10px;
        cursor: pointer;
        width: 80%;
        height: auto; /* Make the queryBox take the height of its content */
        flex-grow: 1;
        align-self: flex-start; /* Align the queryBox at the top */
        font-size:large 24px;
    }

    .query:hover {
        background-color: #e0e0e0;
    }
    .UsageBox {
        display: flex;
        flex-direction: column;
        margin: 10px;
        width: 20%;
        height: auto; /* Make the usageBox take the height of its content */
        flex-grow: 2;
        align-self: flex-start; /* Align the usageBox at the top */
    }

    .usage {
        background-color: #f0f0f0;
        padding: 10px;
        border: thin black solid;
        width: 20%;
        height: auto; /* Make the usage take the height of its content */
        flex-grow: 2;
        align-self: flex-start; /* Align the usage at the top */
    }
    .UsageItem {
        border-bottom: thin black solid;
        display: flex;
        justify-content: space-between;
        botder: thin black solid;
        
    }
    .IndentedItems {
        margin-left: 20px;
        margin-top: 5px;
        margin-bottom: 5px;
        display: flex;
        flex-direction: column;
    }
    .IndentedHeading {
        font-size: 12px;
        font-weight: bold;
        margin-left: 20px;
        margin-right: 10px;
    }
    .IndentedItem {
        margin-left: 20px;
        margin-top: 5px;
        margin-bottom: 5px;
        display: flex;
        justify-content: space-between;
    }
    .UsageItemKey {
        font-size: 12px;
        font-weight: bold;
        margin-left: 40px;
        margin-right: 10px;
    }
    .UsageItemValue {
        font-size: 12px;
        margin-left: 10px;
    }
    .usage:hover {
        background-color: #e0e0e0;
    }
</style>

@code {
    bool hasAccess = false;
    List<string> users = new List<string>();
    static string format=" Return the response in HTML format where the content can be copied into a span tag.";
    Dictionary<string, string> queries = new Dictionary<string, string>
    {
        { "Summary", "Use the facts below to create a summary of the character's life in a compact way without sacrificing readability." +
                "Do not add any additional information or context, but if something doesn't make sense, add a commical commentary. " +
                "Just present the facts as if this was a biography about the character's life." + format},
        { "Critique", "Using the facts below, identify facts that dot't fit.  Explain why each one doesn't quite fit, illustrating it "+
                "if neccessary in a comedic way.  Consolidate your response in the form of a critique." +format},
        { "Compare", "Using the facts below, compare the character's life to that of a famous person.  Use the same format as a biography." +format},
        { "Analyze", "Using the facts below, analyze the character's life and identify any patterns or trends.  Use the scientific format." +format},
        { "Expound", "Using the facts below, suggest activities that fit the trend but would fit in the missing gaps." +format },
        { "Predict", "Using the facts below, predict what the character's life will be like in the future.  Use a story telling format." +format },
        { "Review", "Using the following product reviews, create an overall rating of the product. Describe the best and worst features of the product. " +format},
        { "Picture", "Using the facts below, create a prompt that can be used to generate a picture about the characters life.  Be as vivid as possible." +format },
        { "Collate", "Using only the questions from the list below, group similar questions together and "+
                "give a suggested response from a teacher. Include a count of the questions that were similar for each.  "+format },
        { "Debate", "Using the facts below, create a debate between two people about the character's life.  Generate a script, "+ 
                "listing each interaction as sentence pairs making it easy to see everyone's part in alternating colors. " +format },
        { "Quiz", "Using the facts below, create a list of quiz questions in the fill in the blank format where the blank is in the sentence. " +
                "Give all the answers at the end of the quiz but spelled backwards. " +format},
        { "Q&A", "Using only the questions in the list below, group them into the fewest categories possible but still making sense. "+ 
                "Generate a clear and complete response to all the questions in format that easily flows from idea to idea. Include an intro and summary." + format}
    };
    string queryText = "< Select a query on the left to analyze. >";
    string response = "";
    bool errorOccurred = false;
    string errorMessage = "";
    string fontSize = "32px";

    Dictionary<string, string> usage = new Dictionary<string, string>();

    bool isLoading = false;
    protected async Task OnAfterRenderAsync() // = On Page Load
    {   
        users = Configuration.GetSection("AllowedUsers").Value.Split(",").ToList();
    }
    private static HttpClient? sharedClient;    
    private async Task runQuery( string inputString)
    {
        queryText = inputString;
        response = "";
        errorOccurred = false;
        errorMessage = "";
        isLoading = true;
        StateHasChanged();

        if (sharedClient == null)
        {
            var SamFuncHost = Configuration["SamFunction:Hostname"];
            var SamAuth = Configuration["SamFunction:FunctionKey"];

            sharedClient = new HttpClient();
            sharedClient.BaseAddress = new Uri($"https://{SamFuncHost}");
            sharedClient.DefaultRequestHeaders.Add("x-functions-key", SamAuth);
        }

        try {
            var sf = new Query() { Text = queryText };
            string json = System.Text.Json.JsonSerializer.Serialize(sf);

            var httpResponse =
                await sharedClient.PostAsync("api/getSummary", new StringContent(json, System.Text.Encoding.UTF8, "application/json"));

            Console.WriteLine ($"Response: {httpResponse.StatusCode}");

            httpResponse.EnsureSuccessStatusCode();
            response = await httpResponse.Content.ReadAsStringAsync();

            // Parse the response to get the response text
            // SAMPLE:
            @* {"CreatedAt": "...","FinishReason": 0, "ContentTokenLogProbabilities": [], "RefusalTokenLogProbabilities": [], "Role": 2,
  "Content": [{"Kind": 0, "Text": "...", "ImageUri": null, "ImageBytes": null,"ImageBytesMediaType": null,"ImageDetailLevel": null,"Refusal": null}],
  "ToolCalls": [], "Refusal": null, "FunctionCall": null, "Id": "...",  "Model": "...", "SystemFingerprint": "...", 
  "Usage": { "OutputTokenCount": 71, "InputTokenCount": 96, "TotalTokenCount": 167, "OutputTokenDetails": {"ReasoningTokenCount": 0,"AudioTokenCount": 0},
    "InputTokenDetails": {"AudioTokenCount": 0,"CachedTokenCount": 0}}} *@

            // Parse the response to get the response text
            using (JsonDocument doc = JsonDocument.Parse(response))
            {
                JsonElement root = doc.RootElement;
                JsonElement content = root.GetProperty("Content");
                JsonElement firstContent = content[0];
                response = firstContent.GetProperty("Text").GetString().Trim().Substring(7); // remove the BOM:  "```html"
                response = response.Substring(0, response.Length - 3); // remove the closing "```"

                // copy usage out to a dictionary
                JsonElement usageElement = root.GetProperty("Usage");
                // iterate over the properties of the usage element
                foreach (JsonProperty property in usageElement.EnumerateObject())
                {
                    // add each property to the usage dictionary
                    usage[property.Name] = property.Value.ToString();
                }
            }

            

            isLoading = false;
            StateHasChanged();

        } catch (HttpRequestException e) {
            errorOccurred = true;
            errorMessage = e.Message;
            Console.WriteLine(e);
        }

        StateHasChanged();
    }
}
