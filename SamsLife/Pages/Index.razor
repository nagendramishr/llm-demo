@page "/"
@using SamsLife.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http
@inject ProtectedLocalStorage BrowserStorage
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject UrlHashHelper UrlHashHelper
@inject Util util

@using Microsoft.AspNetCore.WebUtilities

<PageTitle>Index</PageTitle>

<h1>Fact Analyzer!</h1>

@if (isReady) {

    <p>In this interactive session, you're a key part of our discovery process. As our presenter guides you, please share the facts you know by entering them below. Once submitted, OpenAI’s generative AI will analyze your input to reveal insightful connections and patterns. </p>

    <p>Let's see the power of collaborative knowledge in action.</p>

    @if(isValidUrl) {
        var url = System.Web.HttpUtility.UrlEncode(NavigationManager?.Uri);
    
        <p><b>Type in a fact below:</b></p>
        <i>Once you submit a fact, it will be sent to the cloud for analysis.</i>

        <p>@status</p>

        <div class="parent">
            <input style="width: 400px; height: 300px;" rows="10" cols="40" type="text" name="fact" @bind="userFact" />
            <div class="button-like"  @onclick="@( async() => await AddFact(userFact))"> Submit</div>
        </div>

        <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=@url" alt="QR Code" />
        <div class="blank"/>
        
        @if (NavigationManager != null)
        {
            <p>Your can share this link with your friends: <a href="@NavigationManager.Uri">@NavigationManager.Uri</a></p>
            <p>Or scan the QR code above!</p>
        }

    } else {
        <h2> Please wait for the presentation URL.</h2>

        <img src="@kurl" alt="Kitten" style="width: 400px; margin-top: 40px" />
    }
}
else if (isSubmitting) {
    <p>Saving...</p>
}
else if (isDoneSubmitting) {
    <p>Your fact has been Submitted!  </p>

    <p>Click continue to enter another fact</p>
    <div class="button-like"  @onclick="@(async () => await Reset())"> Continue</div>
}



@if (errorOccurred) {
    <p>@errorMessage</p>

}

@code {

    string userFact;

     @* this should be a unique userID... need to test. *@
    string currentInputValue;
    string status = "";

    string kurl = $"kitten{Random.Shared.Next(1, 4)}.png";
    bool isReady = true;
    bool isSubmitting = false;
    bool isDoneSubmitting = false;

    bool errorOccurred = false;
    string errorMessage = "";
    
      public async Task Save()
    {
        await BrowserStorage.SetAsync("name", currentInputValue);
    } 

    public async Task Read()
    {
        var result = await BrowserStorage.GetAsync<string>("name");
        currentInputValue = result.Success ? result.Value ?? Guid.NewGuid().ToString() : Guid.NewGuid().ToString();
    }

    @* // Clean this up LATER!!!! .. basically, I think there is a round trip here that is not needed. *@
    protected async Task OnAfterRenderAsync() @* = On Page Load *@
    {   
        await Read();
        await Save();
        StateHasChanged();
    }

    private async Task Reset()
    {
        isDoneSubmitting = false;
        isSubmitting = false;
        isReady = true;
        StateHasChanged();

        @* // delay for 3 seconds and clear *@
        await Task.Delay(3000);
        status = "";
        StateHasChanged();

    }
    
    private async Task AddFact( string inputString)
    {
        @* await OnAfterRenderAsync();*@

        isSubmitting = true;
        isReady = false;
        status = "Saving...";
        StateHasChanged();

        await util.addFact(boardId, inputString);

        await Task.Delay(3000);

        if (util.errorOccurred) {
            errorOccurred = true;
            errorMessage = util.statusMessage;
        }
        else {
            userFact = "";
            status = $"Your fact has been submitted to BoardId: {boardId}";
        }
    
        isSubmitting = false;
        isDoneSubmitting = true;
        StateHasChanged();
    }

    private string boardId;
    private string hash;
    private bool isValidUrl = false;

    protected override void OnInitialized()
    {
        try {

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("bid", out var bidParam) && query.TryGetValue("hash", out var hashParam))
        {
            boardId = bidParam!;
            hash = hashParam!;

            @* // Validate the hash *@
            isValidUrl = UrlHashHelper.VerifyHash(boardId, hash);
        }
        else
        {
            @* // Handle missing parameters *@
            isValidUrl= false;
        }
        } catch (Exception ex) {
            errorOccurred = true;
            errorMessage = ex.Message;
            Console.WriteLine(ex);
        }
    }

}
