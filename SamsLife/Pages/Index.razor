@page "/"
@using SamsLife.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http
@inject ProtectedLocalStorage BrowserStorage
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<h1>Fact Analyzer!</h1>

@if (isReady) {

    <p>In this interactive session, you're a key part of our discovery process. As our presenter guides you, please share the facts you know by entering them below. Once submitted, OpenAI’s generative AI will analyze your input to reveal insightful connections and patterns. </p>

    <p>Let's see the power of collaborative knowledge in action. <b>Type in a fact below:</b></p>

    <p>@status</p>

    <div class="parent">
        <input style="width: 400px; height: 300px;" rows="10" cols="40" type="text" name="fact" @bind="userFact" />
        <div class="button-like"  @onclick="@( async() => await AddFact(userFact))"> Submit</div>
    </div>
}
else if (isSubmitting) {
    <p>Saving...</p>
}
else if (isDoneSubmitting) {
    <p>Your fact has been Submitted!  </p>

    <p>Click continue to enter another fact</p>
    <div class="button-like"  @onclick="@(async () => await Reset())"> Continue</div>
}

@{
    var url = NavigationManager?.Uri;

<img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=@url" alt="QR Code" />

}
@if (errorOccurred) {
    <p>@errorMessage</p>

}

<style>
.parent {
    display: flex;
    justify-content: left;
    align-items: top;
    height: 100vh;
}
.button-like {
    background-color: #007bff;
    color: #ffffff;
    padding: 8px 16px;
    border-radius: 4px;
    display: inline-block;
    cursor: pointer;
    text-align: center;
    user-select: none;
    height: 40px;
}

.button-like:hover {
    background-color: #0056b3;
}
</style>

@code {

    string userFact;
    string currentInputValue;
    string status = "";
    bool isReady = true;
    bool isSubmitting = false;
    bool isDoneSubmitting = false;

    bool errorOccurred = false;
    string errorMessage = "";
    
      public async Task Save()
    {
        await BrowserStorage.SetAsync("name", currentInputValue);
    } 

    public async Task Read()
    {
        var result = await BrowserStorage.GetAsync<string>("name");
        currentInputValue = result.Success ? result.Value ?? Guid.NewGuid().ToString() : Guid.NewGuid().ToString();
    }

    // Clean this up LATER!!!! .. basically, I think there is a round trip here that is not needed.
    protected async Task OnAfterRenderAsync() // = On Page Load
    {   
        await Read();
        await Save();
        StateHasChanged();
    }

    private async Task Reset()
    {
        isDoneSubmitting = false;
        isSubmitting = false;
        isReady = true;
        StateHasChanged();

        // delay for 3 seconds and clear
        await Task.Delay(3000);
        status = "";
        StateHasChanged();

    }

    private static HttpClient? sharedClient;
    
    // HttpClient lifecycle management best practices:
    // https://learn.microsoft.com/dotnet/fundamentals/networking/http/httpclient-guidelines#recommended-use
    private async Task AddFact( string inputString)
    {
        await OnAfterRenderAsync();
        if (sharedClient == null)
        {
            var SamFuncHost = Configuration["SamFunction:Hostname"];
            var SamAuth = Configuration["SamFunction:FunctionKey"];

            status = "Uploading your fact to the cloud...";
            isReady = false; 

            sharedClient = new HttpClient();
            sharedClient.BaseAddress = new Uri($"https://{SamFuncHost}");
            sharedClient.DefaultRequestHeaders.Add("x-functions-key", SamAuth);
            isSubmitting = true;
            StateHasChanged();
        }

        try {
//            Console.WriteLine($"Adding fact: {inputString}");
            var sf = new SamFact() { id = currentInputValue, Message = inputString };
            string json = System.Text.Json.JsonSerializer.Serialize(sf);
//            Console.WriteLine($"Serialized fact: {json}");
//            Console.WriteLine($"Sending to {sharedClient.BaseAddress}api/addFact");
            await sharedClient.PostAsync("api/addFact", new StringContent(json, System.Text.Encoding.UTF8, "application/json"));
        } catch (HttpRequestException e) {
            errorOccurred = true;
            errorMessage = e.Message;
            Console.WriteLine(e);
        }

        isSubmitting = false;
        isDoneSubmitting = true;
        userFact = "";
        status = "Your fact has been submitted!";
        StateHasChanged();
    }
}
