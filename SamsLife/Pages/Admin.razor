@page "/admin"
@using SamsLife.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http
@using System.Text.Json
@inject ProtectedLocalStorage BrowserStorage
@* @inject IConfiguration Configuration *@
@inject Util util
@using System.Text.Json
@attribute [Authorize]

<AuthorizeView>
    <Authorized>

        @{
            var user = context?.User?.Identity?.Name ?? "";
        }

        <h3>Admin Panel</h3>

        <button class="btn btn-danger" @onclick="async() => await ResetDatabase(user)">Reset Database</button>

        <hr>
        <h4>Boards</h4>
        <div class="boardButtons">
            <button class="btn btn-danger" @onclick="async () => await GetBoards(user)">Load Boards</button>
            <button class="btn btn-danger" @onclick="() => showNewBoard(user)">New Board</button>
        </div>

        @if (boards != null || showAddBoard)
        {
            <div class="boards">

                @if (showAddBoard)
                {
                    <div class="addBoard">
                        <span>Enter the title for the board:</span>
                        <span><input type="text" placeholder="Title" @bind="newBoardTitle" /></span>
                    </div>

                    <button class="btn btn-danger addBoardBtn" @onclick="async () => await AddBoard(user)">Add</button>
                }

                @if (boards != null && !showAddBoard)
                {    
                    var isEditing = new Dictionary<string, bool>();

                    <div class="boardTitle">
                        <span>Created</span>
                        <span>Owner</span>
                        <span>Title</span>
                        <span>Hidden</span>
                    </div>
                    @foreach (var board in boards)
                    {
                        isEditing[board.id] = false;
                        var title = board.Title;

                        <div class="boardRow" @onclick="() => { isEditing[board.id] = true; }" @onclick:stopPropagation >
                            <span>@board.Created</span>
                            <span>@board.Owner</span>
                            @if (isEditing[board.id]) {
                                <span><input type="text" placeholder="Title" @bind="@title" /></span>
                                <span><checkbox></checkbox> Hide</span>
                                <button class="btn btn-danger" @onclick="async () => await AddBoard(user)">Save</button>
                            }
                            else
                            {
                                <span>@board.Title</span>
                                <span>@board.Delete</span>
                            }
                        </div>
                    }
                }
            </div>
        }
                
        @if (boards == null || boards.Count == 0)
        {
            <p>No boards loaded.</p>
        }

        <p>@statusMessage</p>
    </Authorized>
    <NotAuthorized>
        <p>You are not authenticated.</p>
        <p><a href="/MicrosoftIdentity/Account/SignIn?returnUrl=%2Fanalyze">Login</a></p>
    </NotAuthorized>
</AuthorizeView>
<style>
    boardButtons {
        display: flex;
        gap: 10px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 100%;
        justify-content: space-between;
    }
    .addBoard {
        display: flex;
        gap: 10px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
    .boards {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .boardTitle {
        display: flex;
        gap: 10px;
        padding: 5px;
        border-radius: 5px;
        font-weight: bold;
    }
    .boardRow {
        display: flex;
        gap: 10px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
    .boardRow:hover {
        background-color: #f0f0f0;
        cursor: pointer;
    }
    .boardRow span {
        flex: 1;
    }

    .addBoardBtn {
        margin-top: 10px;
        width: 80px;
        height: 30px;
        background-color: #007bff;
        color: white;
    }
</style>
@code {
    private string statusMessage = string.Empty;
    @* private static HttpClient? sharedClient; *@
    private List<Board>? boards;
    private static bool showAddBoard = false;
    private string newBoardTitle = string.Empty;
    private string newBoardOwner = string.Empty;
    @* private void getClient() {
        if (sharedClient == null)
        {
            var SamFuncHost = Configuration["SamFunction:Hostname"];
            var SamAuth = Configuration["SamFunction:FunctionKey"];

            sharedClient = new HttpClient();
            sharedClient.BaseAddress = new Uri($"https://{SamFuncHost}");
            sharedClient.DefaultRequestHeaders.Add("x-functions-key", SamAuth);
        }
    } *@

    private async Task ResetDatabase(string boardId)
    {
        await util.ResetFacts(boardId);
        if (util.errorOccurred)
        {
            statusMessage = util.statusMessage;
            StateHasChanged();
            return;
        }
        @* try
        {
            if (sharedClient == null)
            {
                getClient();
            }

            var httpResponse =
                await sharedClient!.GetAsync("api/resetDB");

            if (!httpResponse.IsSuccessStatusCode)
            {
                statusMessage = $"Error: {httpResponse.StatusCode}";
                return;
            }

            // Simulate a database reset operation
            await Task.Delay(1000); // Replace this with your actual database reset logic
            statusMessage = "Database has been successfully reset.";
        }
        catch (Exception ex)
        {
            statusMessage = $"An error occurred: {ex.Message}";
        } *@
    }

    private async Task GetBoards(string user)
    {

        var data = await util.GetBoards(user);
        if (util.errorOccurred)
        {
            statusMessage = util.statusMessage;
            StateHasChanged();
            return;
        }
        boards = data;
        StateHasChanged();
        @* try
        {
            if (sharedClient == null)
            {
                getClient();
            }

            var httpResponse =
                await sharedClient!.GetAsync("api/getBoards");

            if (!httpResponse.IsSuccessStatusCode)
            {
                statusMessage = $"Error: {httpResponse.StatusCode}";
                return;
            }

            var jsonString = await httpResponse.Content.ReadAsStringAsync();
            boards = JsonSerializer.Deserialize<List<Board>>(jsonString);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"An error occurred: {ex.Message}";
        } *@
    }


    @* Toggles the display of the add board panel *@
    private void showNewBoard(string owner)
    {
        if (showAddBoard)
        {
            showAddBoard = false;
            StateHasChanged();
            return;
        }

        showAddBoard = true;
        newBoardOwner = owner;
        newBoardTitle = string.Empty;
        StateHasChanged();
    }

    private async Task AddBoard(string user) {
        var b = new Board
        {
            Created = DateTime.Now,
            Owner = user,
            Title = newBoardTitle,
            Delete = false
        };
        await util.AddBoard(user, b);

        if (util.errorOccurred)
        {
            statusMessage = util.statusMessage;
            StateHasChanged();
            return;
        }
        await GetBoards(user); // Refresh the board list
        StateHasChanged();
    }

    @* private async Task AddBoard(string user)
    {
        try
        {
            if (sharedClient == null)
            {
                getClient();
            }

            var newBoard = new Board
            {
                Created = DateTime.Now,
                Owner = user, 
                Title = newBoardTitle,
                Delete = false
            };

            var jsonString = JsonSerializer.Serialize(newBoard);
            var content = new StringContent(jsonString, System.Text.Encoding.UTF8, "application/json");

            var httpResponse =
                await sharedClient!.PostAsync("api/addBoard", content);

            if (!httpResponse.IsSuccessStatusCode)
            {
                statusMessage = $"Error: {httpResponse.StatusCode}";
                return;
            }
            var jsonResponse = await httpResponse.Content.ReadAsStringAsync();

            showAddBoard = false;
            newBoardTitle = string.Empty;
            newBoardOwner = string.Empty;
            statusMessage = "Board added successfully.";

            StateHasChanged();
            await GetBoards(user); // Refresh the board list
            
        }
        catch (Exception ex)
        {
            statusMessage = $"An error occurred: {ex.Message}";
        }
    } *@

}