@page "/admin"
@using SamsLife.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http
@using System.Text.Json
@inject ProtectedLocalStorage BrowserStorage
@inject Util util
@inject NavigationManager NavigationManager
@inject UrlHashHelper UrlHashHelper
@using System.Text.Json
@attribute [Authorize]

<AuthorizeView>
    <Authorized>

        @{
            user = context?.User?.Identity?.Name ?? "";
            authorized=true;
        }

@* @if(authorized) { *@
        <h3>Admin Panel</h3>

        <button class="btn btn-danger" @onclick="async() => await ResetDatabase(user)">Reset Database</button>

        <hr>
        <h4>Boards</h4>
        <div class="boardButtons">
            <button class="btn btn-danger" @onclick="async () => await GetBoards(user)">Load Boards</button>
            <button class="btn btn-danger" @onclick="() => showNewBoard(user)">New Board</button>
        </div>

        @if (boards != null || showAddBoard)
        {
            <div class="boards">

                @if (showAddBoard)
                {
                    <div class="addBoard">
                        <span>Enter the title for the board:</span>
                        <span><input type="text" placeholder="Title" @bind="newBoardTitle" /></span>
                    </div>

                    <button class="btn btn-danger addBoardBtn" @onclick="async () => await AddBoard(user)">Add</button>
                }

                @if (boards != null && !showAddBoard)
                {    
                    var isEditing = new Dictionary<string, bool>();


                    <div class="boardTitle">
                        <span>Created</span>
                        <span>Owner</span>
                        <span>Title</span>
                        <span>Hidden</span>
                        <span>Link</span>
                    </div>
                    @foreach (var board in boards)
                    {
                        isEditing[board.id] = false;
                        var title = board.Title;

                        <div class="boardRow" @onclick="() => { isEditing[board.id] = true; }" @onclick:stopPropagation >
                            <span>@board.Created</span>
                            <span>@board.Owner</span>
                            @if (isEditing[board.id]) {
                                <span><input type="text" placeholder="Title" @bind="@title" /></span>
                                <span><checkbox></checkbox> Hide</span>
                                <button class="btn btn-danger" @onclick="async () => await AddBoard(user)">Save</button>
                            }
                            else
                            {
                                var hash = UrlHashHelper.GenerateHash(board.id);
                                var url = $"{NavigationManager.BaseUri}?bid={board.id}&hash={hash}";

                                <span>@board.Title</span>
                                <span><a href="@url">Link</a></span>
                            }
                        </div>
                    }
                }
            </div>
        }
                
        @if (boards == null || boards.Count == 0)
        {
            <p>No boards loaded.</p>
        }

        <p>@statusMessage</p>
@* } *@

    </Authorized>
    <NotAuthorized>
        <p>You are not authenticated.</p>
        <p><a href="/MicrosoftIdentity/Account/SignIn?returnUrl=%2Fanalyze">Login</a></p>
        @{
            user = "";
            authorized=false;
        }
    </NotAuthorized>
</AuthorizeView>
@code {
    private string statusMessage = string.Empty;
    private List<Board>? boards;
    private static bool showAddBoard = false;
    private string newBoardTitle = string.Empty;
    private string newBoardOwner = string.Empty;
    private bool authorized;
    private string user;

    private async Task ResetDatabase(string boardId)
    {
        await util.ResetFacts(boardId);
        if (util.errorOccurred)
        {
            statusMessage = util.statusMessage;
            StateHasChanged();
            return;
        }
    }

    private async Task GetBoards(string user)
    {

        var data = await util.GetBoards(user);
        if (util.errorOccurred)
        {
            statusMessage = util.statusMessage;
            StateHasChanged();
            return;
        }
        boards = data;
        StateHasChanged();
    }


    @* Toggles the display of the add board panel *@
    private void showNewBoard(string owner)
    {
        if (showAddBoard)
        {
            showAddBoard = false;
            StateHasChanged();
            return;
        }

        showAddBoard = true;
        newBoardOwner = owner;
        newBoardTitle = string.Empty;
        StateHasChanged();
    }

    private async Task AddBoard(string user) {
        var b = new Board
        {
            Created = DateTime.Now,
            Owner = user,
            Title = newBoardTitle,
            Delete = false
        };
        await util.AddBoard(user, b);

        if (util.errorOccurred)
        {
            statusMessage = util.statusMessage;
            StateHasChanged();
            return;
        }
        await GetBoards(user); // Refresh the board list
        StateHasChanged();
    }

}